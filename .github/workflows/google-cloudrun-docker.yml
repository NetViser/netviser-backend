name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - 'main'

env:
  PROJECT_ID: 'netviser'
  REGION: 'asia-east1'
  GAR_NAME: 'netviser-gar'
  GAR_LOCATION: 'asia-east1'
  SERVICE: 'netviser-app'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: 'actions/checkout@v4'
        # Pulls the latest code from the main branch for building and deployment.

      # Authenticate with Google Cloud using Workload Identity Federation to generate a secure access token. Prefer this over JSON credentials for better security and scalability; see google-github-actions/auth for advanced configurations.
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # Set up Docker authentication for Google Artifact Registry (GAR) and build/push the container image. Skip these steps if youâ€™re sourcing a pre-built image from elsewhere.
      - name: GAR Auth
        run: |
          gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |
          DOCKER_TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"
          # Tags the image with the commit SHA for traceability and pushes it to GAR. Ensure your Dockerfile is optimized for production use.

      # Deploy the container to Cloud Run, injecting critical environment variables for the backend app. Secrets are sourced from GitHub Secrets for security; verify all required vars are set in the repo settings.
      - name: Deploy to Cloud Run
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE }}
          image: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"
          region: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}
          env_vars: |
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}
            LAMBDA_INFERENCE_FUNCTION_NAME=${{ secrets.LAMBDA_INFERENCE_FUNCTION_NAME }}
            MAX_UPLOAD_SIZE=${{ secrets.MAX_UPLOAD_SIZE }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            SECURE_COOKIE=${{ secrets.SECURE_COOKIE }}

      - name: Allow Unauthenticated Access
        run: |
          gcloud run services add-iam-policy-binding ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} \
            --member="allUsers" \
            --role="roles/run.invoker"
